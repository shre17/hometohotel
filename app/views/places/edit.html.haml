=# javascript_include_tag('autocomplete_address.js')
%script{:async => "", :defer => "defer", :src => "https://maps.googleapis.com/maps/api/js?key=AIzaSyCW5WrXE2PKioWg1yO62dkpOk5sDhzCVxc&libraries=places&callback=initMap"}

%main
  %section.hero_in.become_host_form
    .wrapper
  / /hero_in
  .form-progress
    .progress_bar
  .bg_color_1
    %section
      .container-fluid.location
        = form_with(model: @place, local: true, id: "host_form") do |form|
          - @step = (params[:step] || @place.step).to_i
          - @form = form
          - if @place.is_created
            = render partial: "top_bar"

          - @step = 1 if @step == 18
          = render  "places/steps/step_#{@step}", form: form
          .step-button
            .step-buttons-box{:class => ("step_btn" if (params[:step].to_i || @place.step.to_i) == 16 || (params[:step] || @place.step.to_i) == 11 || (params[:step] || @place.step.to_i) == 8)}
              = link_to edit_place_path(@place, step: (params[:step] || @place.step).to_i - 1), method: :get, class: 'btn prev' do
                %i.ti-angle-left
                = t('common.back_button')
              - if (params[:step] || @place.step ) == 18
                = form.submit 'Submit', class: 'btn next next-button' do
                  %i.ti-angle-right
                  = t('places.edit_page.continue_button')
              - else
                = form.submit 'Continue', class: 'btn next next-button' do
                  %i.ti-angle-right
                  = t('places.edit_page.continue_button')


= javascript_include_tag('input_qty.js')

:javascript
  // Show and Hide Category and its property js
  if ($("#place_property_type_id").val() != "") {
    $('#place_property_type_id').attr('disabled', false);
    $(".guests_have").show();
  }
  else {
    $('#place_property_type_id').attr('disabled','disabled');
    $(".guests_have").hide();
  }

  // Get Properties js
  $(document).on('change', '#place_category_id', function() {
    var id = $(this).val();
    $.ajax({
      type:"post",
      url: "#{get_property_categories_path}",
      data: {id: id},
      success: function(response) {
        $('#place_property_type_id').removeAttr('disabled');
        $('#place_property_type_id').html('');
        $.each(response.data, function(key, value) {
          $('#place_property_type_id')
            .append($("<option></option>")
                    .attr("value",value[0])
                    .text(value[1]));
        });
        $(".guests_have").show();
        $(".step-1").removeClass('d-none');
      }
    })
  });

  // Enable only numeric input js
  $(".allownumericwithdecimal").on("keypress keyup blur",function (event) {
    $(this).val($(this).val().replace(/[^0-9\.]/g,''));
      if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
        event.preventDefault();
      }
    });

  $('#bedrooms .links a').hide()

  $(document).on('change', "#place_number_of_bedrooms", function(){
    var required_bedrooms = parseInt($(this).val().split(' ')[0]);

    var current_bedrooms = $('#bedrooms .nested-fields.bed-detail:visible').length;

    var required_bedrooms = required_bedrooms - current_bedrooms;
    if (required_bedrooms < 0) {
      fields = $('#bedrooms .nested-fields.bed-detail:visible');

      for (i = required_bedrooms; i < 0; i++) {
        field = $(fields[current_bedrooms+i])
        field.find('.bedroom-links a.remove_fields').trigger('click');
      }
      setTimeout(update_selected_field, 20);
    } else {
      for (i = 0; i < required_bedrooms; i++) {
        $('#bedrooms .add-bedroom-link').find('[data-association=bedroom]').last().trigger('click');
        $('.bed-fields a').last().trigger('click');
      }
    }

    $.each($(".nested-fields.bed-detail"),function(index,bed){
      $(bed).find('.bed-heading').text("Room " + parseInt(index+1));
    });
  });

  function update_selected_field(){
    count = $('#bedrooms .nested-fields.bed-detail:visible').length;
    $(".select-bedrooms").val(count);
  }

  function set_lat_long(lat, long){
    $.ajax({
      url: "#{address_validation_place_path("#{@place.id}")}",
      data: {latitude: lat, longitude: long, type: "Place"},
      type: "get",
      success: function(response){},
      failure: function(response){},
    })
  }

  $(document).ready(function(){
    $(".btn-success").click(function(){
      loc = $("#autocomplete").val();
      api_key = "AIzaSyABGpqgjjCQRdJnuCjd9_op63aNPr95Y60";
      $.ajax({
        url: "https://maps.googleapis.com/maps/api/geocode/json",
        data: { address: loc, key: api_key },
        type: "get",
        success: function(response){
          lat = response.results[0].geometry.location.lat;
          long = response.results[0].geometry.location.lng;
          set_lat_long(lat,long);
        },
        failure: function(response){},
      });
    });
  });

  $(document).on("click", ".remove-bed", function(){
    count = $('#bedrooms .nested-fields.bed-detail:visible').length - 1;
    if(count == 0){
      $(".select-bedrooms").val("");
    }
    else{
      $(".select-bedrooms").val(count);
    }
  });

/ From _form page
:javascript
  function readFile(input) {
    $("#status").html('Processing...');
    counter = input.files.length;
    for(x = 0; x<counter; x++){
      if (input.files && input.files[x]) {

        var reader = new FileReader();

        reader.onload = function (e) {
          $("#photos").append('<div class="col-md-3 col-sm-3 col-xs-3"><img src="'+e.target.result+'" class="img-thumbnail"></div><input name="place[image][description]" class="form-control" type="text">');
        };

        reader.readAsDataURL(input.files[x]);
      }
    }
    if(counter == x){$("#status").html('');}
  }

  $('.btn-number').click(function(e){
    e.preventDefault();

    fieldName = $(this).attr('data-field');
    type      = $(this).attr('data-type');
    var input = $("input[name='"+fieldName+"']");
    var currentVal = parseInt(input.val());
    if (!isNaN(currentVal)) {
        if(type == 'minus') {

            if(currentVal > input.attr('min')) {
                input.val(currentVal - 1).change();
            }
            if(parseInt(input.val()) == input.attr('min')) {
                $(this).attr('disabled', true);
            }

        } else if(type == 'plus') {

            if(currentVal < input.attr('max')) {
                input.val(currentVal + 1).change();
            }
            if(parseInt(input.val()) == input.attr('max')) {
                $(this).attr('disabled', true);
            }

        }
    } else {
        input.val(0);
    }
  });

  $('.input-number').focusin(function(){
     $(this).data('oldValue', $(this).val());
  });

  $('.input-number').change(function() {
    minValue =  parseInt($(this).attr('min'));
    maxValue =  parseInt($(this).attr('max'));
    valueCurrent = parseInt($(this).val());

    name = $(this).attr('name');
    if(valueCurrent >= minValue) {
        $(".btn-number[data-type='minus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the minimum value was reached');
        $(this).val($(this).data('oldValue'));
    }
    if(valueCurrent <= maxValue) {
        $(".btn-number[data-type='plus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the maximum value was reached');
        $(this).val($(this).data('oldValue'));
    }
  });

  $(".input-number").keydown(function (e) {
    // Allow: backspace, delete, tab, escape, enter and .
    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
       // Allow: Ctrl+A
      (e.keyCode == 65 && e.ctrlKey === true) ||
       // Allow: home, end, left, right
      (e.keyCode >= 35 && e.keyCode <= 39)) {
       // let it happen, don't do anything
       return;
    }
    // Ensure that it is a number and stop the keypress
    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
        e.preventDefault();
    }
  });

  $(function () {
    $('[data-toggle="popover"]').popover()
  })

  $(function(){
    var inputs = document.getElementsByClassName('autocomplete');

    var options = {
      types: ['(cities)'],
      componentRestrictions: {country: 'fr'}
    };

    var autocompletes = [];

    for (var i = 0; i < inputs.length; i++) {
      var autocomplete = new google.maps.places.Autocomplete(inputs[i]);
      autocomplete.inputId = inputs[i].id;
      autocomplete.addListener('place_changed', fillIn);
      autocompletes.push(autocomplete);
    }

    function fillIn() {
      console.log(this.inputId);
      var place = this.getPlace();
      console.log(place. address_components[0].long_name);
      if($("input#country").val() != ""){
        $(".locations_other_fields").removeClass("d-none");
      }
    }
  });

  var maxLength = 50;
  $(document).on('keyup', '#place_name', function() {
    var textlen = maxLength - $(this).val().length;
    if (textlen >= 0) {
      $('#rchars').text(textlen);
    }
    else {
      return false
    }
  });
